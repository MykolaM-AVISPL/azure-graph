package com.example.restservice;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RestController
public class SubscriptionController {
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	private final ObjectMapper om = new ObjectMapper();
	private final Map<String, Notification> subscriptionNotifications = new ConcurrentHashMap<>();
	RestTemplate restTemplate = new RestTemplate();

	@PostMapping("/notify")
	public @ResponseBody String getNotifications(@RequestBody(required = false) String notifications, @RequestParam(required = false) String validationToken) {
		if (StringUtils.isEmpty(validationToken)) {
			checkSubscriptionData(notifications);
		}
		return validationToken;
	}

	private void checkSubscriptionData(String notifications) {
		try {
			Map<String, List<Notification>> notificationsMap = om.readValue(notifications, new TypeReference<Map<String, List<Notification>>>() {
			});
			String token = "eyJ0eXAiOiJKV1QiLCJub25jZSI6IkZMUElkNjJYWmxSVjcwXzExN2VvT1Uyc2NQR2xLa1pncF9ISjlJS01HYnciLCJhbGciOiJSUzI1NiIsIng1dCI6Im5PbzNaRHJPRFhFSzFqS1doWHNsSFJfS1hFZyIsImtpZCI6Im5PbzNaRHJPRFhFSzFqS1doWHNsSFJfS1hFZyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC85N2M2OGFiOS05NGM5LTQzMTItOWJkYi0wZDJiYmE1M2NiYzAvIiwiaWF0IjoxNjE0NjgzNDk2LCJuYmYiOjE2MTQ2ODM0OTYsImV4cCI6MTYxNDY4NzM5NiwiYWNjdCI6MCwiYWNyIjoiMSIsImFjcnMiOlsidXJuOnVzZXI6cmVnaXN0ZXJzZWN1cml0eWluZm8iLCJ1cm46bWljcm9zb2Z0OnJlcTEiLCJ1cm46bWljcm9zb2Z0OnJlcTIiLCJ1cm46bWljcm9zb2Z0OnJlcTMiLCJjMSIsImMyIiwiYzMiLCJjNCIsImM1IiwiYzYiLCJjNyIsImM4IiwiYzkiLCJjMTAiLCJjMTEiLCJjMTIiLCJjMTMiLCJjMTQiLCJjMTUiLCJjMTYiLCJjMTciLCJjMTgiLCJjMTkiLCJjMjAiLCJjMjEiLCJjMjIiLCJjMjMiLCJjMjQiLCJjMjUiXSwiYWlvIjoiQVVRQXUvOFRBQUFBdzYwR1ZjcmRsaVVkRlB4UmovN2FKY1pqZENKVnRPRitvZHhkSlZDa2NMVk9yVjh4ME1Ha3E1RFFIaU93Z2R5cDJkMDFuMzczclRZcldSTG1WN1V4clE9PSIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiR3JhcGggZXhwbG9yZXIgKG9mZmljaWFsIHNpdGUpIiwiYXBwaWQiOiJkZThiYzhiNS1kOWY5LTQ4YjEtYThhZC1iNzQ4ZGE3MjUwNjQiLCJhcHBpZGFjciI6IjAiLCJmYW1pbHlfbmFtZSI6Ik1hdHNpc2hpbiIsImdpdmVuX25hbWUiOiJNeWtvbGEiLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiIxNzYuMzcuMTA0LjIxMyIsIm5hbWUiOiJNeWtvbGEgTWF0c2lzaGluIiwib2lkIjoiMGEwYTk1M2YtZDY4Zi00MGZhLTgyYzEtOTBlNTk2NWUxNDg2IiwicGxhdGYiOiIzIiwicHVpZCI6IjEwMDMyMDAxMUE4Qzg3QjMiLCJyaCI6IjAuQUFBQXVZckdsOG1VRWtPYjJ3MHJ1bFBMd0xYSWk5NzUyYkZJcUsyM1NOcHlVR1NDQUprLiIsInNjcCI6IkFjY2Vzc1Jldmlldy5SZWFkLkFsbCBBY2Nlc3NSZXZpZXcuUmVhZFdyaXRlLkFsbCBBY2Nlc3NSZXZpZXcuUmVhZFdyaXRlLk1lbWJlcnNoaXAgQWRtaW5pc3RyYXRpdmVVbml0LlJlYWQuQWxsIEFkbWluaXN0cmF0aXZlVW5pdC5SZWFkV3JpdGUuQWxsIEFncmVlbWVudC5SZWFkLkFsbCBBZ3JlZW1lbnQuUmVhZFdyaXRlLkFsbCBBZ3JlZW1lbnRBY2NlcHRhbmNlLlJlYWQgQWdyZWVtZW50QWNjZXB0YW5jZS5SZWFkLkFsbCBBbmFseXRpY3MuUmVhZCBBcHBDYXRhbG9nLlJlYWQuQWxsIEFwcENhdGFsb2cuUmVhZFdyaXRlLkFsbCBBcHBDYXRhbG9nLlN1Ym1pdCBBcHBsaWNhdGlvbi5SZWFkLkFsbCBBcHBsaWNhdGlvbi5SZWFkV3JpdGUuQWxsIEFwcFJvbGVBc3NpZ25tZW50LlJlYWRXcml0ZS5BbGwgQXBwcm92YWwuUmVhZC5BbGwgQXBwcm92YWwuUmVhZFdyaXRlLkFsbCBBcHByb3ZhbFJlcXVlc3QuUmVhZC5BZG1pbkNvbnNlbnRSZXF1ZXN0IEFwcHJvdmFsUmVxdWVzdC5SZWFkLkN1c3RvbWVyTG9ja2JveCBBcHByb3ZhbFJlcXVlc3QuUmVhZC5FbnRpdGxlbWVudE1hbmFnZW1lbnQgQXBwcm92YWxSZXF1ZXN0LlJlYWQuUHJpdmlsaWdlZEFjY2VzcyBBcHByb3ZhbFJlcXVlc3QuUmVhZFdyaXRlLkFkbWluQ29uc2VudFJlcXVlc3QgQXBwcm92YWxSZXF1ZXN0LlJlYWRXcml0ZS5DdXN0b21lckxvY2tib3ggQXBwcm92YWxSZXF1ZXN0LlJlYWRXcml0ZS5FbnRpdGxlbWVudE1hbmFnZW1lbnQgQXBwcm92YWxSZXF1ZXN0LlJlYWRXcml0ZS5Qcml2aWxpZ2VkQWNjZXNzIEF1ZGl0TG9nLlJlYWQuQWxsIEJpdGxvY2tlcktleS5SZWFkLkFsbCBCaXRsb2NrZXJLZXkuUmVhZEJhc2ljLkFsbCBCb29raW5ncy5NYW5hZ2UuQWxsIEJvb2tpbmdzLlJlYWQuQWxsIEJvb2tpbmdzLlJlYWRXcml0ZS5BbGwgQm9va2luZ3NBcHBvaW50bWVudC5SZWFkV3JpdGUuQWxsIENhbGVuZGFycy5SZWFkIENhbGVuZGFycy5SZWFkLlNoYXJlZCBDYWxlbmRhcnMuUmVhZFdyaXRlIENhbGVuZGFycy5SZWFkV3JpdGUuU2hhcmVkIENoYW5uZWwuQ3JlYXRlIENoYW5uZWwuRGVsZXRlLkFsbCBDaGFubmVsLlJlYWRCYXNpYy5BbGwgQ2hhbm5lbE1lbWJlci5SZWFkLkFsbCBDaGFubmVsTWVtYmVyLlJlYWRXcml0ZS5BbGwgQ2hhbm5lbE1lc3NhZ2UuRGVsZXRlIENoYW5uZWxNZXNzYWdlLkVkaXQgQ2hhbm5lbE1lc3NhZ2UuUmVhZC5BbGwgQ2hhbm5lbE1lc3NhZ2UuU2VuZCBDaGFubmVsU2V0dGluZ3MuUmVhZC5BbGwgQ2hhbm5lbFNldHRpbmdzLlJlYWRXcml0ZS5BbGwgRGF0YUxvc3NQcmV2ZW50aW9uUG9saWN5LkV2YWx1YXRlIERpcmVjdG9yeS5BY2Nlc3NBc1VzZXIuQWxsIERpcmVjdG9yeS5SZWFkLkFsbCBEaXJlY3RvcnkuUmVhZFdyaXRlLkFsbCBlbWFpbCBHcm91cC5SZWFkV3JpdGUuQWxsIEdyb3VwTWVtYmVyLlJlYWQuQWxsIEdyb3VwTWVtYmVyLlJlYWRXcml0ZS5BbGwgSWRlbnRpdHlSaXNrRXZlbnQuUmVhZC5BbGwgSWRlbnRpdHlSaXNrRXZlbnQuUmVhZFdyaXRlLkFsbCBNYWlsLlJlYWQgTWFpbC5SZWFkLlNoYXJlZCBNYWlsLlJlYWRCYXNpYyBNYWlsLlJlYWRXcml0ZSBNYWlsLlJlYWRXcml0ZS5TaGFyZWQgTWFpbC5TZW5kIE1haWwuU2VuZC5TaGFyZWQgTWFpbGJveFNldHRpbmdzLlJlYWQgTWFpbGJveFNldHRpbmdzLlJlYWRXcml0ZSBvcGVuaWQgUHJpdmlsZWdlZEFjY2Vzcy5SZWFkLkF6dXJlQURHcm91cCBQcml2aWxlZ2VkQWNjZXNzLlJlYWRXcml0ZS5BenVyZUFER3JvdXAgcHJvZmlsZSBTZWN1cml0eUV2ZW50cy5SZWFkLkFsbCBTZWN1cml0eUV2ZW50cy5SZWFkV3JpdGUuQWxsIFNpdGVzLlJlYWQuQWxsIFNpdGVzLlJlYWRXcml0ZS5BbGwgU3Vic2NyaXB0aW9uLlJlYWQuQWxsIFRhc2tzLlJlYWQgVGFza3MuUmVhZC5TaGFyZWQgVGFza3MuUmVhZFdyaXRlIFRhc2tzLlJlYWRXcml0ZS5TaGFyZWQgVGVhbS5DcmVhdGUgVGVhbS5SZWFkQmFzaWMuQWxsIFRlYW1NZW1iZXIuUmVhZC5BbGwgVGVhbU1lbWJlci5SZWFkV3JpdGUuQWxsIFRlYW1NZW1iZXIuUmVhZFdyaXRlTm9uT3duZXJSb2xlLkFsbCBUZWFtc0FjdGl2aXR5LlJlYWQgVGVhbXNBY3Rpdml0eS5TZW5kIFRlYW1zQXBwLlJlYWQgVGVhbXNBcHAuUmVhZC5BbGwgVGVhbXNBcHAuUmVhZFdyaXRlIFRlYW1zQXBwLlJlYWRXcml0ZS5BbGwgVGVhbXNBcHBJbnN0YWxsYXRpb24uUmVhZEZvckNoYXQgVGVhbXNBcHBJbnN0YWxsYXRpb24uUmVhZEZvclRlYW0gVGVhbXNBcHBJbnN0YWxsYXRpb24uUmVhZEZvclVzZXIgVGVhbXNBcHBJbnN0YWxsYXRpb24uUmVhZFdyaXRlRm9yQ2hhdCBUZWFtc0FwcEluc3RhbGxhdGlvbi5SZWFkV3JpdGVGb3JUZWFtIFRlYW1zQXBwSW5zdGFsbGF0aW9uLlJlYWRXcml0ZUZvclVzZXIgVGVhbXNBcHBJbnN0YWxsYXRpb24uUmVhZFdyaXRlU2VsZkZvckNoYXQgVGVhbXNBcHBJbnN0YWxsYXRpb24uUmVhZFdyaXRlU2VsZkZvclRlYW0gVGVhbXNBcHBJbnN0YWxsYXRpb24uUmVhZFdyaXRlU2VsZkZvclVzZXIgVGVhbVNldHRpbmdzLlJlYWQuQWxsIFRlYW1TZXR0aW5ncy5SZWFkV3JpdGUuQWxsIFRlYW1zVGFiLkNyZWF0ZSBUZWFtc1RhYi5SZWFkLkFsbCBUZWFtc1RhYi5SZWFkV3JpdGUuQWxsIFRlYW1zVGFiLlJlYWRXcml0ZUZvckNoYXQgVGVhbXNUYWIuUmVhZFdyaXRlRm9yVGVhbSBUZWFtc1RhYi5SZWFkV3JpdGVGb3JVc2VyIFVzZXIuUmVhZCBVc2VyLlJlYWQuQWxsIFVzZXIuUmVhZEJhc2ljLkFsbCBVc2VyLlJlYWRXcml0ZSBVc2VyLlJlYWRXcml0ZS5BbGwiLCJzdWIiOiJVYW1nV1RmQmZicG9UbkdWRTVjN0xid2hSbFNYQjRnLV94T29DdDg1eG1vIiwidGVuYW50X3JlZ2lvbl9zY29wZSI6IkVVIiwidGlkIjoiOTdjNjhhYjktOTRjOS00MzEyLTliZGItMGQyYmJhNTNjYmMwIiwidW5pcXVlX25hbWUiOiJuaWNvbGFzX2Rldl9taWNyb0BhdmkxZG9tYWluLm9ubWljcm9zb2Z0LmNvbSIsInVwbiI6Im5pY29sYXNfZGV2X21pY3JvQGF2aTFkb21haW4ub25taWNyb3NvZnQuY29tIiwidXRpIjoib21DNFhLNDhuRTZ5aHhneml0RVRBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiNjJlOTAzOTQtNjlmNS00MjM3LTkxOTAtMDEyMTc3MTQ1ZTEwIiwiYjc5ZmJmNGQtM2VmOS00Njg5LTgxNDMtNzZiMTk0ZTg1NTA5Il0sInhtc19zdCI6eyJzdWIiOiJzQ2hrOUQzcmhsR1Y1dHFsbjZuQ2JZSDFTX1QyR3dvZ291UGdEd1BmNFk4In0sInhtc190Y2R0IjoxNjE0MTc4NDExfQ.hry52fTYlnRE6WJhEH5a_PIUV3Ef7pS_drNyQQZpmqyCl8xXTg-O2Cf-l-Vr3nJBwvvXKVmd9aFfN6Y75q4bVoHtugSGqWGbd-DIQjiNzmDemSy6n4W8YiQIasjTRzKObjlCxWOcQbb6r_MyauUBkYKZJpUs1_ze3FnBWGkdCeHKo5_mUvBxhNjm8V0uaUQPBTdqXV37WmnwSB_QgiTFghuY6H1ci3rfroEWEugioemMPeF0Qv5uWUDxX-I3jGWGjCVUEw_yRsk0MZQX1DzU5U5XTBoCs_PXBjMpv7yfpVKuarRhOSFOqAvZ8_yxjvwKeHWltK_UhGAPyty8vITUHQ";
			notificationsMap.entrySet().stream().flatMap(a -> a.getValue().stream()).forEach(notification ->
					{
						Notification previousValue = subscriptionNotifications.get(notification.getSubscriptionId());
						if (previousValue == null) {
							ResponseEntity<Object> objectResponseEntity = doGetRequest(notification.getResource(), token);
							subscriptionNotifications.put(notification.getSubscriptionId(), notification);
						} else if (!previousValue.equals(notification)) {
							ResponseEntity<Object> objectResponseEntity = doGetRequest(notification.getResource(), token);
							subscriptionNotifications.put(notification.getSubscriptionId(), notification);
						}
					}
			);
		} catch (JsonProcessingException e) {
			logger.error(e.getLocalizedMessage());
		}
	}

	private ResponseEntity<Object> doGetRequest(String url, String accessToken) {
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_JSON);
		headers.set("Authorization", "Bearer " + accessToken);
		HttpEntity<Object> entity = new HttpEntity<>(headers);
		return restTemplate.exchange("https://graph.microsoft.com/v1.0/" + url, HttpMethod.GET, entity, Object.class);
	}
}
